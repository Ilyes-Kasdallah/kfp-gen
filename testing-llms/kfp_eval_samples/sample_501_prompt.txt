You are an MLOps engineer. Write a Kubeflow pipeline based on the following description and code logic:

A pipeline to sample conversations given a situation          .. _p_generate_sample_conversations:      Example payload to invoke via slack integrations:      A minimal example:          @charon run generate_sample_conversations          .. code-block:: python              {                 "situations": "The user wants to talk to a human agent, so the agent transfers the call",                 "llm_trainer_repo_name": "LLMtrainer",                 "llm_trainer_repo_branch": "main"                 }       A full available parameters example:          @charon run generate_sample_conversations          .. code-block:: python              {                 "situations": "The user disputes the debt, so the agent transfers the call to the agent :: The user cannot pay any amount as they have a difficult situation, so the agent hangs up the call. "                 "llm_trainer_repo_name": "LLMtrainer",                 "llm_trainer_repo_branch": "main",             }      :param situations: The situations for generating the conversations     :type situations: optional          :param prompt: Prompt to the model for data generation     type prompt: str      :param filename: Acts as a prfix to the default naming used     :type filename: str      :param llm_trainer_repo_name: The conversation generation repo name in Github.     :type llm_trainer_repo_name: str          :param llm_trainer_repo_branch: The branch name in the conversation generation repo to use , defaults to main.     :type llm_trainer_repo_branch: str, optional          :param model: Optional model to be used for generating data      :type model: str          :param n_iter: No of times we make iterate on sub_scenarios list to generate conversations     type n_iter: int          :param n_choice: No of convs generated in a single time from a scenario.     type n_choice: int          :param temperature: Temperature     type temperature: float          :param notify: Whether to send a slack notification, defaults to ""     :type notify: str, optional      :param channel: The slack channel to send the notification, defaults to ""     :type channel: str, optional      :param slack_thread: The slack thread to send the notification, defaults to ""     :type slack_thread: str, optional